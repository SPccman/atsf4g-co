// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_header_v3.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pb_header_v3.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace owent {
namespace xresloader {
namespace pb {

void protobuf_ShutdownFile_pb_5fheader_5fv3_2eproto() {
  delete xresloader_header::default_instance_;
  delete xresloader_datablocks::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_pb_5fheader_5fv3_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_pb_5fheader_5fv3_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_pb_5fheader_5fv3_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  xresloader_header::default_instance_ = new xresloader_header();
  xresloader_datablocks::default_instance_ = new xresloader_datablocks();
  xresloader_header::default_instance_->InitAsDefaultInstance();
  xresloader_datablocks::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pb_5fheader_5fv3_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_pb_5fheader_5fv3_2eproto_once_);
void protobuf_AddDesc_pb_5fheader_5fv3_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_pb_5fheader_5fv3_2eproto_once_,
                 &protobuf_AddDesc_pb_5fheader_5fv3_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pb_5fheader_5fv3_2eproto {
  StaticDescriptorInitializer_pb_5fheader_5fv3_2eproto() {
    protobuf_AddDesc_pb_5fheader_5fv3_2eproto();
  }
} static_descriptor_initializer_pb_5fheader_5fv3_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int xresloader_header::kXresVerFieldNumber;
const int xresloader_header::kDataVerFieldNumber;
const int xresloader_header::kCountFieldNumber;
const int xresloader_header::kHashCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

xresloader_header::xresloader_header()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.owent.xresloader.pb.xresloader_header)
}

void xresloader_header::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

xresloader_header::xresloader_header(const xresloader_header& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.owent.xresloader.pb.xresloader_header)
}

void xresloader_header::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  xres_ver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
  hash_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

xresloader_header::~xresloader_header() {
  // @@protoc_insertion_point(destructor:com.owent.xresloader.pb.xresloader_header)
  SharedDtor();
}

void xresloader_header::SharedDtor() {
  xres_ver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void xresloader_header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const xresloader_header& xresloader_header::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pb_5fheader_5fv3_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fheader_5fv3_2eproto();
#endif
  return *default_instance_;
}

xresloader_header* xresloader_header::default_instance_ = NULL;

xresloader_header* xresloader_header::New(::google::protobuf::Arena* arena) const {
  xresloader_header* n = new xresloader_header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void xresloader_header::Clear() {
// @@protoc_insertion_point(message_clear_start:com.owent.xresloader.pb.xresloader_header)
  xres_ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
  hash_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool xresloader_header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.owent.xresloader.pb.xresloader_header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string xres_ver = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xres_ver()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->xres_ver().data(), this->xres_ver().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.owent.xresloader.pb.xresloader_header.xres_ver"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data_ver;
        break;
      }

      // optional string data_ver = 2;
      case 2: {
        if (tag == 18) {
         parse_data_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_ver()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data_ver().data(), this->data_ver().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.owent.xresloader.pb.xresloader_header.data_ver"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hash_code;
        break;
      }

      // optional string hash_code = 4;
      case 4: {
        if (tag == 34) {
         parse_hash_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash_code().data(), this->hash_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.owent.xresloader.pb.xresloader_header.hash_code"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.owent.xresloader.pb.xresloader_header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.owent.xresloader.pb.xresloader_header)
  return false;
#undef DO_
}

void xresloader_header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.owent.xresloader.pb.xresloader_header)
  // optional string xres_ver = 1;
  if (this->xres_ver().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xres_ver().data(), this->xres_ver().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.owent.xresloader.pb.xresloader_header.xres_ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->xres_ver(), output);
  }

  // optional string data_ver = 2;
  if (this->data_ver().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_ver().data(), this->data_ver().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.owent.xresloader.pb.xresloader_header.data_ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data_ver(), output);
  }

  // optional uint32 count = 3;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // optional string hash_code = 4;
  if (this->hash_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash_code().data(), this->hash_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.owent.xresloader.pb.xresloader_header.hash_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hash_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.owent.xresloader.pb.xresloader_header)
}

int xresloader_header::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.owent.xresloader.pb.xresloader_header)
  int total_size = 0;

  // optional string xres_ver = 1;
  if (this->xres_ver().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->xres_ver());
  }

  // optional string data_ver = 2;
  if (this->data_ver().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_ver());
  }

  // optional uint32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  // optional string hash_code = 4;
  if (this->hash_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash_code());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xresloader_header::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const xresloader_header*>(&from));
}

void xresloader_header::MergeFrom(const xresloader_header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.owent.xresloader.pb.xresloader_header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.xres_ver().size() > 0) {

    xres_ver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xres_ver_);
  }
  if (from.data_ver().size() > 0) {

    data_ver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_ver_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.hash_code().size() > 0) {

    hash_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_code_);
  }
}

void xresloader_header::CopyFrom(const xresloader_header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.owent.xresloader.pb.xresloader_header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xresloader_header::IsInitialized() const {

  return true;
}

void xresloader_header::Swap(xresloader_header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void xresloader_header::InternalSwap(xresloader_header* other) {
  xres_ver_.Swap(&other->xres_ver_);
  data_ver_.Swap(&other->data_ver_);
  std::swap(count_, other->count_);
  hash_code_.Swap(&other->hash_code_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string xresloader_header::GetTypeName() const {
  return "com.owent.xresloader.pb.xresloader_header";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// xresloader_header

// optional string xres_ver = 1;
void xresloader_header::clear_xres_ver() {
  xres_ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& xresloader_header::xres_ver() const {
  // @@protoc_insertion_point(field_get:com.owent.xresloader.pb.xresloader_header.xres_ver)
  return xres_ver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void xresloader_header::set_xres_ver(const ::std::string& value) {
  
  xres_ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.owent.xresloader.pb.xresloader_header.xres_ver)
}
 void xresloader_header::set_xres_ver(const char* value) {
  
  xres_ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.owent.xresloader.pb.xresloader_header.xres_ver)
}
 void xresloader_header::set_xres_ver(const char* value, size_t size) {
  
  xres_ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.owent.xresloader.pb.xresloader_header.xres_ver)
}
 ::std::string* xresloader_header::mutable_xres_ver() {
  
  // @@protoc_insertion_point(field_mutable:com.owent.xresloader.pb.xresloader_header.xres_ver)
  return xres_ver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* xresloader_header::release_xres_ver() {
  // @@protoc_insertion_point(field_release:com.owent.xresloader.pb.xresloader_header.xres_ver)
  
  return xres_ver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void xresloader_header::set_allocated_xres_ver(::std::string* xres_ver) {
  if (xres_ver != NULL) {
    
  } else {
    
  }
  xres_ver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xres_ver);
  // @@protoc_insertion_point(field_set_allocated:com.owent.xresloader.pb.xresloader_header.xres_ver)
}

// optional string data_ver = 2;
void xresloader_header::clear_data_ver() {
  data_ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& xresloader_header::data_ver() const {
  // @@protoc_insertion_point(field_get:com.owent.xresloader.pb.xresloader_header.data_ver)
  return data_ver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void xresloader_header::set_data_ver(const ::std::string& value) {
  
  data_ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.owent.xresloader.pb.xresloader_header.data_ver)
}
 void xresloader_header::set_data_ver(const char* value) {
  
  data_ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.owent.xresloader.pb.xresloader_header.data_ver)
}
 void xresloader_header::set_data_ver(const char* value, size_t size) {
  
  data_ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.owent.xresloader.pb.xresloader_header.data_ver)
}
 ::std::string* xresloader_header::mutable_data_ver() {
  
  // @@protoc_insertion_point(field_mutable:com.owent.xresloader.pb.xresloader_header.data_ver)
  return data_ver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* xresloader_header::release_data_ver() {
  // @@protoc_insertion_point(field_release:com.owent.xresloader.pb.xresloader_header.data_ver)
  
  return data_ver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void xresloader_header::set_allocated_data_ver(::std::string* data_ver) {
  if (data_ver != NULL) {
    
  } else {
    
  }
  data_ver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_ver);
  // @@protoc_insertion_point(field_set_allocated:com.owent.xresloader.pb.xresloader_header.data_ver)
}

// optional uint32 count = 3;
void xresloader_header::clear_count() {
  count_ = 0u;
}
 ::google::protobuf::uint32 xresloader_header::count() const {
  // @@protoc_insertion_point(field_get:com.owent.xresloader.pb.xresloader_header.count)
  return count_;
}
 void xresloader_header::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:com.owent.xresloader.pb.xresloader_header.count)
}

// optional string hash_code = 4;
void xresloader_header::clear_hash_code() {
  hash_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& xresloader_header::hash_code() const {
  // @@protoc_insertion_point(field_get:com.owent.xresloader.pb.xresloader_header.hash_code)
  return hash_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void xresloader_header::set_hash_code(const ::std::string& value) {
  
  hash_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.owent.xresloader.pb.xresloader_header.hash_code)
}
 void xresloader_header::set_hash_code(const char* value) {
  
  hash_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.owent.xresloader.pb.xresloader_header.hash_code)
}
 void xresloader_header::set_hash_code(const char* value, size_t size) {
  
  hash_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.owent.xresloader.pb.xresloader_header.hash_code)
}
 ::std::string* xresloader_header::mutable_hash_code() {
  
  // @@protoc_insertion_point(field_mutable:com.owent.xresloader.pb.xresloader_header.hash_code)
  return hash_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* xresloader_header::release_hash_code() {
  // @@protoc_insertion_point(field_release:com.owent.xresloader.pb.xresloader_header.hash_code)
  
  return hash_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void xresloader_header::set_allocated_hash_code(::std::string* hash_code) {
  if (hash_code != NULL) {
    
  } else {
    
  }
  hash_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash_code);
  // @@protoc_insertion_point(field_set_allocated:com.owent.xresloader.pb.xresloader_header.hash_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int xresloader_datablocks::kHeaderFieldNumber;
const int xresloader_datablocks::kDataBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

xresloader_datablocks::xresloader_datablocks()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.owent.xresloader.pb.xresloader_datablocks)
}

void xresloader_datablocks::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  header_ = const_cast< ::com::owent::xresloader::pb::xresloader_header*>(
      ::com::owent::xresloader::pb::xresloader_header::internal_default_instance());
#else
  header_ = const_cast< ::com::owent::xresloader::pb::xresloader_header*>(&::com::owent::xresloader::pb::xresloader_header::default_instance());
#endif
}

xresloader_datablocks::xresloader_datablocks(const xresloader_datablocks& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.owent.xresloader.pb.xresloader_datablocks)
}

void xresloader_datablocks::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
}

xresloader_datablocks::~xresloader_datablocks() {
  // @@protoc_insertion_point(destructor:com.owent.xresloader.pb.xresloader_datablocks)
  SharedDtor();
}

void xresloader_datablocks::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete header_;
  }
}

void xresloader_datablocks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const xresloader_datablocks& xresloader_datablocks::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pb_5fheader_5fv3_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fheader_5fv3_2eproto();
#endif
  return *default_instance_;
}

xresloader_datablocks* xresloader_datablocks::default_instance_ = NULL;

xresloader_datablocks* xresloader_datablocks::New(::google::protobuf::Arena* arena) const {
  xresloader_datablocks* n = new xresloader_datablocks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void xresloader_datablocks::Clear() {
// @@protoc_insertion_point(message_clear_start:com.owent.xresloader.pb.xresloader_datablocks)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  data_block_.Clear();
}

bool xresloader_datablocks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.owent.xresloader.pb.xresloader_datablocks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.owent.xresloader.pb.xresloader_header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data_block;
        break;
      }

      // repeated bytes data_block = 2;
      case 2: {
        if (tag == 18) {
         parse_data_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data_block()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data_block;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.owent.xresloader.pb.xresloader_datablocks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.owent.xresloader.pb.xresloader_datablocks)
  return false;
#undef DO_
}

void xresloader_datablocks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.owent.xresloader.pb.xresloader_datablocks)
  // optional .com.owent.xresloader.pb.xresloader_header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // repeated bytes data_block = 2;
  for (int i = 0; i < this->data_block_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data_block(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.owent.xresloader.pb.xresloader_datablocks)
}

int xresloader_datablocks::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.owent.xresloader.pb.xresloader_datablocks)
  int total_size = 0;

  // optional .com.owent.xresloader.pb.xresloader_header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated bytes data_block = 2;
  total_size += 1 * this->data_block_size();
  for (int i = 0; i < this->data_block_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data_block(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xresloader_datablocks::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const xresloader_datablocks*>(&from));
}

void xresloader_datablocks::MergeFrom(const xresloader_datablocks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.owent.xresloader.pb.xresloader_datablocks)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_block_.MergeFrom(from.data_block_);
  if (from.has_header()) {
    mutable_header()->::com::owent::xresloader::pb::xresloader_header::MergeFrom(from.header());
  }
}

void xresloader_datablocks::CopyFrom(const xresloader_datablocks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.owent.xresloader.pb.xresloader_datablocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xresloader_datablocks::IsInitialized() const {

  return true;
}

void xresloader_datablocks::Swap(xresloader_datablocks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void xresloader_datablocks::InternalSwap(xresloader_datablocks* other) {
  std::swap(header_, other->header_);
  data_block_.UnsafeArenaSwap(&other->data_block_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string xresloader_datablocks::GetTypeName() const {
  return "com.owent.xresloader.pb.xresloader_datablocks";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// xresloader_datablocks

// optional .com.owent.xresloader.pb.xresloader_header header = 1;
bool xresloader_datablocks::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void xresloader_datablocks::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::com::owent::xresloader::pb::xresloader_header& xresloader_datablocks::header() const {
  // @@protoc_insertion_point(field_get:com.owent.xresloader.pb.xresloader_datablocks.header)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return header_ != NULL ? *header_ : *default_instance().header_;
#else
  return header_ != NULL ? *header_ : *default_instance_->header_;
#endif
}
::com::owent::xresloader::pb::xresloader_header* xresloader_datablocks::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::com::owent::xresloader::pb::xresloader_header;
  }
  // @@protoc_insertion_point(field_mutable:com.owent.xresloader.pb.xresloader_datablocks.header)
  return header_;
}
::com::owent::xresloader::pb::xresloader_header* xresloader_datablocks::release_header() {
  // @@protoc_insertion_point(field_release:com.owent.xresloader.pb.xresloader_datablocks.header)
  
  ::com::owent::xresloader::pb::xresloader_header* temp = header_;
  header_ = NULL;
  return temp;
}
void xresloader_datablocks::set_allocated_header(::com::owent::xresloader::pb::xresloader_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.owent.xresloader.pb.xresloader_datablocks.header)
}

// repeated bytes data_block = 2;
int xresloader_datablocks::data_block_size() const {
  return data_block_.size();
}
void xresloader_datablocks::clear_data_block() {
  data_block_.Clear();
}
 const ::std::string& xresloader_datablocks::data_block(int index) const {
  // @@protoc_insertion_point(field_get:com.owent.xresloader.pb.xresloader_datablocks.data_block)
  return data_block_.Get(index);
}
 ::std::string* xresloader_datablocks::mutable_data_block(int index) {
  // @@protoc_insertion_point(field_mutable:com.owent.xresloader.pb.xresloader_datablocks.data_block)
  return data_block_.Mutable(index);
}
 void xresloader_datablocks::set_data_block(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.owent.xresloader.pb.xresloader_datablocks.data_block)
  data_block_.Mutable(index)->assign(value);
}
 void xresloader_datablocks::set_data_block(int index, const char* value) {
  data_block_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.owent.xresloader.pb.xresloader_datablocks.data_block)
}
 void xresloader_datablocks::set_data_block(int index, const void* value, size_t size) {
  data_block_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.owent.xresloader.pb.xresloader_datablocks.data_block)
}
 ::std::string* xresloader_datablocks::add_data_block() {
  // @@protoc_insertion_point(field_add_mutable:com.owent.xresloader.pb.xresloader_datablocks.data_block)
  return data_block_.Add();
}
 void xresloader_datablocks::add_data_block(const ::std::string& value) {
  data_block_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.owent.xresloader.pb.xresloader_datablocks.data_block)
}
 void xresloader_datablocks::add_data_block(const char* value) {
  data_block_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.owent.xresloader.pb.xresloader_datablocks.data_block)
}
 void xresloader_datablocks::add_data_block(const void* value, size_t size) {
  data_block_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.owent.xresloader.pb.xresloader_datablocks.data_block)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
xresloader_datablocks::data_block() const {
  // @@protoc_insertion_point(field_list:com.owent.xresloader.pb.xresloader_datablocks.data_block)
  return data_block_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
xresloader_datablocks::mutable_data_block() {
  // @@protoc_insertion_point(field_mutable_list:com.owent.xresloader.pb.xresloader_datablocks.data_block)
  return &data_block_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace xresloader
}  // namespace owent
}  // namespace com

// @@protoc_insertion_point(global_scope)
