cmake_minimum_required(VERSION 3.1.0)
cmake_policy(SET CMP0054 NEW)

project(atgw_inner_v1_c)

########################################################################
# CMake 模块 (递归包含模块, 带颜色输出模块, 平台检测模块)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake_modules")

include("${CMAKE_CURRENT_LIST_DIR}/cmake_modules/EchoWithColor.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/cmake_modules/FindConfigurePackage.cmake")

#####################################################################
# 导入编译器和编译选项配置
include("${CMAKE_CURRENT_LIST_DIR}/cmake_modules/CompilerOption.cmake")
EchoWithColor(COLOR GREEN "-- Build Type: ${CMAKE_BUILD_TYPE}")

########################################################################
# just like ATBUS_MACRO_DATA_SMALL_SIZE
set(ATFRAME_GATEWAY_MACRO_DATA_SMALL_SIZE 3072 CACHE STRING "small message buffer for atgateway connection(used to reduce memory copy when there are many small messages)")
set(ATBUS_MACRO_MSG_LIMIT 65536 CACHE STRING "message size limit of libatbus")
add_compiler_define(ATBUS_MACRO_MSG_LIMIT=${ATBUS_MACRO_MSG_LIMIT})

# 加密算法库检测
# =========== 3rd_party - openssl/libressl/mbedtls ===========
find_package(OpenSSL)
if(OPENSSL_FOUND)
    include_directories(${OPENSSL_INCLUDE_DIR})
    list(APPEND 3RD_PARTY_CRYPT_LINK_NAME ${OPENSSL_CRYPTO_LIBRARY})
    EchoWithColor(COLOR Green "-- Dependency: openssl found")
    add_compiler_define(LIBATFRAME_ATGATEWAY_ENABLE_OPENSSL=1)
else()
    EchoWithColor(COLOR Yellow "-- Dependency: openssl not found")
    find_package(MbedTLS)
    if(MBEDTLS_FOUND)
        include_directories(${MbedTLS_INCLUDE_DIRS})
        list(APPEND 3RD_PARTY_CRYPT_LINK_NAME ${MbedTLS_CRYPTO_LIBRARIES})
        EchoWithColor(COLOR Green "-- Dependency: mbedtls found(${MbedTLS_INCLUDE_DIRS})")
        add_compiler_define(LIBATFRAME_ATGATEWAY_ENABLE_MBEDTLS=1)
    else()
        #EchoWithColor(COLOR Yellow "-- Dependency: mbedtls not found")
        #message(FATAL_ERROR "must at least have one of openssl,libressl or mbedtls.")
        if(OPENSSL_ROOT_DIR)
            include_directories("${OPENSSL_ROOT_DIR}/include")
            link_directories("${OPENSSL_ROOT_DIR}/lib")
            list(APPEND 3RD_PARTY_CRYPT_LINK_NAME crypt)
            EchoWithColor(COLOR Green "-- Dependency: openssl force set to ${OPENSSL_ROOT_DIR}")
            add_compiler_define(LIBATFRAME_ATGATEWAY_ENABLE_OPENSSL=1)
        elseif (MBEDTLS_ROOT)
            include_directories("${MBEDTLS_ROOT}/include")
            link_directories("${MBEDTLS_ROOT}/lib")
            list(APPEND 3RD_PARTY_CRYPT_LINK_NAME mbedcrypto)
            EchoWithColor(COLOR Green "-- Dependency: mbedtls force set to ${MBEDTLS_ROOT}")
            add_compiler_define(LIBATFRAME_ATGATEWAY_ENABLE_MBEDTLS=1)
        else()
            EchoWithColor(COLOR Yellow "-- Dependency: mbedtls not found")
            message(FATAL_ERROR "must at least have one of openssl,libressl or mbedtls.")
        endif()
    endif()
endif()

if (MINGW)
    EchoWithColor(COLOR GREEN "-- MinGW: custom add lib gdi32")
    list(APPEND 3RD_PARTY_CRYPT_LINK_NAME gdi32)
endif()

# 目标
include_directories("${CMAKE_CURRENT_LIST_DIR}/include" "${CMAKE_CURRENT_LIST_DIR}/src/protocols" "${CMAKE_CURRENT_LIST_DIR}/src")
file(GLOB_RECURSE SRC_LIST
    include/*.h
    src/*.cpp
    src/*.cc
    src/*.c
    src/*.cxx
    src/*.h
    src/*.hpp
)

if(WIN32 AND NOT MINGW AND NOT CYGWIN)
    set(LIB_NAME "libatgw_inner_v1_c")
else()
    set(LIB_NAME "atgw_inner_v1_c")
endif()

if (APPLE)
    add_library(${LIB_NAME} STATIC ${SRC_LIST})
else()
    add_library(${LIB_NAME} SHARED ${SRC_LIST})
endif()

target_link_libraries(${LIB_NAME}
    ${3RD_PARTY_CRYPT_LINK_NAME}
    ${COMPILER_OPTION_EXTERN_CXX_LIBS}
)

# 安装内容
install(FILES "${CMAKE_CURRENT_LIST_DIR}/include/libatgw_inner_v1_c.h" DESTINATION "include")
install(TARGETS ${LIB_NAME}
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib)